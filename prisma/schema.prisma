generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PageViews {
  id         Int    @id @default(autoincrement())
  pagePath   String @unique
  viewsCount Int    @default(0)
}

// Tutorial Page
model Tutorial {
  id          Int       @id @default(autoincrement())
  slug        String    @unique
  title       String
  description String
  sections    Section[]
  tasks       Task[]
}

// Outer Accordion
model Section {
  id         Int       @id @default(autoincrement())
  tutorial   Tutorial  @relation(fields: [tutorialId], references: [id])
  slug       String    @unique
  tutorialId Int
  title      String
  lectures   Lecture[]
  tasks      Task[]
}

// Inner Accordion
model Lecture {
  id        Int     @id @default(autoincrement())
  title     String
  slug      String  @unique
  sectionId Int
  section   Section @relation(fields: [sectionId], references: [id])
  tasks     Task[]
}

// Table Rows with Checkboxes
model Task {
  id          Int     @id @default(autoincrement())
  title       String
  slug        String  @unique
  difficulty  String  @default("Easy")
  articleUrl  String?
  youtubeUrl  String?
  practiceUrl String?

  lecture   Lecture? @relation(fields: [lectureId], references: [id])
  lectureId Int?

  section   Section? @relation(fields: [sectionId], references: [id])
  sectionId Int?

  tutorial   Tutorial? @relation(fields: [tutorialId], references: [id])
  tutorialId Int?

  progress Progress[]
}

model Progress {
  id        Int     @id @default(autoincrement())
  userId    String
  taskId    Int
  completed Boolean @default(false)

  task Task  @relation(fields: [taskId], references: [id])
  user User? @relation(fields: [userId], references: [id])

  @@unique([userId, taskId])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  password      String? // For credentials auth
  image         String?
  accounts      Account[]
  sessions      Session[]
  progress      Progress[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}
